//
//  SwaggerMethod.swift
//  Ernie
//
//  Created by Randy Haid on 12/7/17.
//  Copyright Â© 2017 Randy Haid. All rights reserved.
//

import Foundation

class SwaggerMethod
{
    /// The name of the method.
    var methodName: String
    
    /// Indicates what kind of method this is in the HTTP world.
    var methodType = SwaggerMethodTypeEnum.GET
    
    /// An array of descriptive tags for the method.
    var methodTags: [String] = []
    
    /// A summary of this method.
    var methodSummary: String?
    
    /// A description of this method.
    var methodDescription: String?
    
    /// By default, this will match |methodName|.
    var methodOperationId: String
    
    /// The parameters that need to be passed to the method.
    var methodArguments: [SwaggerMethodArgument] = []
    
    /// The HTTP responses that can be generated by the method.
    var methodResponses: [SwaggerResponse] = []
    
    /// A list of the type of files that can be accepted/created with this method.
    var methodProducts: [SwaggerProductEnum] = []
    
    init(name: String)
    {
        self.methodName = name
        self.methodOperationId = name
    }
    
    func generateSwaggerSection() -> [String : Any]
    {
        // Create the return object with the simple properties assigned.
        var swaggerBody: [String : Any] = [:]
        swaggerBody["operationId"] = self.methodOperationId
        
        // Add the products to swaggerBody.
        if self.methodProducts.count > 0
        {
            var productStrings: [String] = []
            for product in self.methodProducts
            {
                productStrings.append(product.stringValue())
            }
            swaggerBody["produces"] = productStrings
        }
        else
        {
            swaggerBody["produces"] = [SwaggerProductEnum.JSON.stringValue()]
        }
        
        // Add the tags to swaggerBody.
        if self.methodTags.count > 0
        {
            swaggerBody["tags"] = self.methodTags
        }
        
        // Add the summary to swaggerBody.
        if let summary = self.methodSummary
        {
            swaggerBody["summary"] = summary
        }
        
        // Add the description to swaggerBody.
        if let description = self.methodDescription
        {
            swaggerBody["description"] = description
        }
        
        // Add the parameters to swaggerBody.
        var parametersSection: [[String : Any]] = [[:]]
        for parameter in self.methodArguments
        {
            parametersSection.append(parameter.generateSwaggerJson())
        }
        swaggerBody["parameters"] = parametersSection
        
        // Add the responses to swaggerBody.
        var responsesSection: [String : Any] = [:]
        for response in self.methodResponses
        {
            responsesSection[response.responseHttpCode] = response.generateSwaggerJson()
        }
        swaggerBody["responses"] = responsesSection

        return swaggerBody
    }
}
